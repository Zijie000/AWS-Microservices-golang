name: Packer Build and Go test after Pull Request

on:
  push:
    branches:
      - main

jobs:
  after_pull_rq:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials for dev account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Setup packer
        uses: hashicorp/setup-packer@main

      - name: Get location
        run: pwd

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test ./test
      
      - name: Build webapp executable file
        run: GOOS=linux GOARCH=amd64 go build -o webapp
      
      - name: Initialize packer
        run: packer init webapp_ami_packer.pkr.hcl

      - name: Set timestamp for AMI name
        id: set-timestamp
        run: |
          echo "AMI_TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          echo "Generated AMI timestamp: ${{ env.AMI_TIMESTAMP }}"
      
      - name: Build AMI with Packer
        run: |
          packer build \
            -var "aws_region=${{ secrets.AWS_REGION }}" \
            -var "source_ami=${{ secrets.SOURCE_AMI }}" \
            -var "instance_type=${{ secrets.INSTANCE_TYPE }}" \
            -var "ssh_username=${{ secrets.SSH_USER }}" \
            -var "ami_user=${{ secrets.AMI_USER }}" \
            -var "aws_profile=${{ secrets.AWS_PROFILE }}" \
            -var "ami_name=csye6225-${{ env.AMI_TIMESTAMP }}" \
            webapp_ami_packer.pkr.hcl
      
      - name: Get the latest AMI ID
        id: latest-ami
        run: |
            LATEST_AMI=$(aws ec2 describe-images --owners self \
            --filters "Name=name,Values=csye6225-*" \
            --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
            --output text)

            echo "LATEST_AMI=$LATEST_AMI" >> $GITHUB_ENV
      
      - name: Configure AWS Credentials for demo account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
          aws-region: us-east-1

      - name: Create new Launch Template version
        id: new-launch-template
        run: |
          NEW_VERSION=$(aws ec2 create-launch-template-version \
          --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
          --source-version 1 \
          --launch-template-data "{\"ImageId\":\"$LATEST_AMI\"}" \
          --query "LaunchTemplateVersion.VersionNumber" \
          --output text)

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update Auto Scaling Group with new Launch Template version
        run: |
          aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name ${{ secrets.SCALING_GROUP_NAME }} \
          --launch-template "LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},Version=$NEW_VERSION" 

      - name: Start Instance Refresh
        id: start-refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name ${{ secrets.SCALING_GROUP_NAME }} \
          --query "InstanceRefreshId" --output text)

          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for Instance Refresh to complete
        id: wait-refresh
        run: |
          STATUS="InProgress"
          while [ "$STATUS" == "InProgress" ]; do
            echo "Waiting for instance refresh to complete..."
            sleep 30
            STATUS=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name ${{ secrets.SCALING_GROUP_NAME }} \
            --instance-refresh-ids $REFRESH_ID \
            --query "InstanceRefreshes[0].Status" \
            --output text)

            echo "Current status: $STATUS"
          done

          if [ "$STATUS" != "Successful" ]; then
            echo "Instance refresh failed with status: $STATUS"
            exit 1
          fi
